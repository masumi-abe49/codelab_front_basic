【JavaScript知識確認】


◆JSの役割

基本的なWEBサイトにおいて、動きを付加する役割がある。
例えば、
スライドショー
アニメーション
フォーム
アコーディオンなど。

ただし、現在のJavaScriptは実現できることがかなり多くなっており、単純な動きを作るだけでなくサーバーからデータを取得してリアルタイムに情報を処理（Ajaxという非同期通信技術によって、サーバーと通信中であっても別の処理を引き続き行える）したり、さまざまなイベント処理（例えばクリックした時の処理など）を実行できる。

ーーーーーーー

・HTMLは骨組み、CSSは見た目の装飾としての役割がある
・JavaScriptはWebサイトの動きを付加することに使うのが基本
・JavaScriptはDOM操作、イベント処理、Ajaxなどで使うことも多い

ーーーーーーー

★参考URL：https://www.sejuku.net/blog/88139

-------------------------

◆JSを外部ファイルとして読み込む場合、scriptタグの何という属性ファイルパスを記載するか


別のフォルダーにあるJavaScriptファイルや外部のファイルを読み込んで使用する場合には＜src＞属性を設定して使用する。
srcには使用したいJavaScriptファイルへのパスやURLを設定します。

例：<script src="sample.js"></script>

scriptタグとは、javaScriptやVBscriptなどのスクリプトをHTMLファイル内に埋め込んだり外部のスクリプトを読み込んだりするためにために使用するタグ。
重要な属性として、＜type＞と＜src＞があります。

typeはどのタイプのスクリプトを使用するかを指定します。
HTML5であれば、デフォルトでtype=”text/javascript”となっており省略してもJavaScriptを使用できる。
それ以前のHTMLのバージョンやJavaScript以外を使用する場合は必ず設定する必要あり。

例：<script type="text/javascript">処理</script>

そのほかに重要な属性として、async/deferがある。
この２つは読み込みを非同期にすることができる模様。
HTMLの読み込みと並行してjavascriptの読み込みを行えるので処理にかかる時間を軽減可能。
asyncはHTMLの読み込みとjavascriptの読み込み・実行を非同期で平行して行います。

例：<script async src="sample.js"></script>

deferはHTMLの読み込みが終わった後で、JavaScriptの読み込み・実行を非同期で行います。
<script defer src="sample.js"></script>

★参考URL：https://techacademy.jp/magazine/22786

-------------------------

◆JSはbody終了タグの直前で読み込むことが多い理由


JavaScriptファイルの読み込みによってページの表示完了にかかる時間が遅くなるのを防ぐため、
できるだけ(外部JavaScriptファイルを読み込むための)script要素は、HTMLの最後に記述するようにする。

例えば、
・アクセス解析のスクリプト(＝描画にまったく影響しないスクリプト)
・ある条件(時刻やユーザの操作など)によって特定の位置の描画を変化させるスクリプト(＝ページの描画が全て終わってから機能するスクリプト)
などは、読み込みが最後でも問題はない。

HTML中にJavaScriptファイルを読み込む記述があると、そのJavaScriptを読み終わるまで、ウェブページのレンダリング(描画)が止まってしまうからです。

外部JavaScriptファイルをHTMLの先頭で読み込ませると、そのJavaScriptを読み終わるまでページの描画が始まらなくなってしまう。
しかし、HTMLの末尾で読み込ませれば、ページの描画が全て終わってからJavaScriptファイルが読まれるため、(JavaScriptファイルの読み込み完了を待つために)描画が止まることはない。

★参考URL：https://allabout.co.jp/gm/gc/380498/2/

-------------------------

◆オブジェクト


オブジェクトとは、プロパティ（※）を複数集めたもの集合のことです。（連想配列）
変数配列もオブジェクトの一種に当たる。データを管理するのに非常に重要なもの。
※プロパティ…あらかじめ設定しておいた特定の情報（値）に、名前（プロパティ名）をつけたもの


<script>
      const traffic_light = {
        blue: "go",
        yellow: "slow down",
        red: "stop"
      }
    </script>

blue: “go”・yellow: “slow down”・red: “stop” はそれぞれがプロパティです。
：の前方がプロパティ名、後方が値。
この3つのプロパティを持ったオブジェクトが、traffic_lightという変数に定義されているという状態をあらわしている。

★参考URL：https://techacademy.jp/magazine/5556
	https://qiita.com/hirotatsu/items/1e56186dd24e55d0bcac

-------------------------

◆メソッド


メソッドとは、＜オブジェクトのプロパティに代入された関数＞のこと。
あるオブジェクトのプロパティに関数を定義した場合、関数と呼ばずに、そのオブジェクトのメソッドと呼ぶ。

プロパティ名を設定し、：で区切った後に、function以下の関数を値に記載する(){}

★参考URL：https://techacademy.jp/magazine/5562

-------------------------

◆プロパティ


プロパティ…あらかじめ設定しておいた特定の情報（値）に、名前（プロパティ名）をつけたもの
（オブジェクトの状態や特性を表す情報のこと）

例↓

{}の中身がプロパティとなる。

var edward = {
    firstName: 'エドワード',
    lastName: 'エルリック',
    age: 15,
    job: '国家錬金術師',
    family: ['アルフォンス', 'トリシャ', 'ヴァン','師匠', 'ウィンリィ'],
    isMarried: false
};


★参考URL：https://code-graffiti.com/object-properties-and-methods-in-javascript/

-------------------------

◆Elementオブジェクト

Elementオブジェクトは、HTMLまたはXMLの要素を表す。

Elementオブジェクトはドキュメント上の要素を表します。例えば下記は、a要素。

<a href="https://syncer.jp/">SYNCER</a>

Elementオブジェクトの取得方法は様々。
例えば一番簡単で有名なのはgetElementById()。
これはドキュメント上にある全ての要素の中から、特定のid属性を持つ要素を1つ取得するメソッド。

<p><a id="anchor">SYNCER</a></p>

★参考URL：https://syncer.jp/javascript-reference/element
	http://alphasis.info/javascript/dom/elementobject/
　　　　　（JavaScriptにおけるDOM（ドキュメントオブジェクトモデル）のElementオブジェクトについて。）

-------------------------

◆クッキー


cookieとは、ブラウザに保存される小さな情報です。

例えばログインが必要なWebサイトに2回目以降訪問した場合、ログインIDを入力する欄にあらかじめIDが設定されている場合がある。
このような場面で利用されるのがcookie。

cookieを読み書き削除するにはdocument.cookieを使う。

★参考URL：https://techacademy.jp/magazine/20783
	https://developer.mozilla.org/ja/docs/Web/API/Document/cookie

-------------------------

◆カスタム属性


カスタムデータ属性は、html要素に対して、設定することができる独自の属性。
属性名は data- から始まる。

例↓ data-●● = "◆◆" 

<div id="example" data-hoge="fuga"></div>

以下も、参考URLより。

・dataset でカスタムデータ属性の値を取得
　dataset プロパティを利用して、カスタムデータ属性の値を取得する。

　var hoge = document.getElementById('example').dataset.hoge;

・getAttribute でカスタムデータ属性の値を取得
　getAttribute メソッドを利用して、カスタムデータ属性の値を取得する。

　var hoge = document.getElementById('example').getAttribute('data-hoge');

・dataset でカスタムデータ属性の値を変更
　dataset プロパティを利用して、カスタムデータ属性の値を変更する。

　document.getElementById('example').dataset.hoge = 'piyo';

・setAttribute でカスタムデータ属性の値を変更
　setAttribute メソッドを利用して、カスタムデータ属性の値を変更する。

　document.getElementById('example').setAttribute('data-hoge', 'piyo');

★参考URL：http://sarchitect.net/10929

-------------------------

◆JSON(JavaScript Object Notation)


さまざまな情報をやり取りするための＜データ形式＞のことでファイルの拡張子は「.json」。
JSONは軽量で単純なテキストデータのため、サーバー間の通信やさまざまなプログラミング言語との共有などにも効果的。
JavaScriptのオブジェクト形式のような構造をしていることから、特にJavaScriptと親和性が高い。

・JSONデータを作成する方法

最も基本となるJSONデータの作成方法。

JavaScriptのオブジェクト構造を作る時とほとんど同じだが、
プロパティと値をそれぞれ「" "」で囲む必要がある。

例↓

var json = {
    "name": "taro",
    "age": "30",
    "tel": "090-0123-4567"
}

この例では、「name / age / tel」という3つのプロパティと値がペアになったJSONデータを作成している。
基本的な構造はオブジェクトと同じ。
このデータを「○○○.json」というファイル名で保存すれば、さまざまなケースで利用できるJSONファイルになる。

配列構造のJSONデータを作る方法
JSONデータは、オブジェクトと同じように配列構造を形成することも可能なのでご紹介しておきます！

例えば、3人分の情報が記載されたJSONデータを1つにまとめたい時は次のように記述します。

var json = [
    {
        "name": "太郎",
        "age": "30",
        "tel": "090-0123-4567"
    },
    {
        "name": "花子",
        "age": "23",
        "tel": "080-4567-8901"
    },
    {
        "name": "三郎",
        "age": "18",
        "tel": "070-3456-7890"
    }
]
この例では、一人ずつのJSONデータを配列に格納することでまとめている。
このようにカンマ区切りで複数のデータをまとめることも可能で、データの階層構造を作ることもできる柔軟性を持っている。

★参考URL：https://www.sejuku.net/blog/47716
（・JSONの追加・削除はオブジェクトデータと同じように扱える
　・オブジェクトや配列をJSONにエンコード（変換）するには「JSON.stringify()」を使う
　・JSONをJavaScriptで扱いやすくするには「JSON.parse()」を使う
　という内容もまとめられている）

-------------------------

◆WebAPI


ネットワーク越しに利用できる関数。
URLが関数名で引数を渡す事で結果が変化する。

Web APIとは、ひとことで言えば、インターネット（Web）を経由して、
何らかの処理を行うための、手段や決めごと（API）のことです。
APIとは、Application Program Interfaceの略で、
直訳すると、あるプログラムを、他のアプリケーションから利用するためのインターフェース、という意味になる。

一般的なプログラムでは、関数やサブルーチンと呼ばれるひとかたまりの処理を作成し、それをプログラム内のほかの場所から呼び出すことができる。
Web APIを利用すると、それと同じような感覚で、インターネット経由で別のサーバー上にあるプログラムを呼び出し、その結果を受け取ることができるようになる。
by CodeZine（https://codezine.jp/article/detail/7169）

google apiや、amazon apiのように有名なWebAPIがある。
また、自分でWebAPIを作って自分だけで利用することも可能。

WebAPIを実行する事をWebAPIを叩くという言い回しがある。


【APIについて】

APIは「Application Program Interface」の略で簡単に説明すると、どのアプリーケーションでも共通で使える機能を提供する仕組み。
→プログラムの関数のようなもの
(開発者が複雑な機能をより簡単に作成できるよう、プログラミング言語から提供される構造。複雑なコードを抽象化し、それにかわる簡潔な構文を提供。)

alert('test');

↑上のコードを実行するとアラートが表示される。alert()関数はプログラマが書いた関数では無く、ブラウザ標準で持っている関数。それを規定の方法で利用するとアラートウィンドウを表示する。
これがAPIにあたる。

APIは「特定の機能を持つプログラム部品」。
よく使われる命令をAPIにしてみんなで共有してしまえば、非常に効率的に作業ができる。

参考URL：https://qiita.com/busyoumono99/items/9b5ffd35dd521bafce47

-------------------------

◆Ajax（Asynchronous JavaScript + XML）


Ajaxとは「Asynchronous JavaScript + XML」の略

Asynchronousとは、＜非同時性の、非同期の＞。

つまり、「JavaScriptとXMLを使って非同期にサーバとの間の通信を行うこと。」

画像の遷移のない通信を非同期通信と言う。
＜同期処理は一瞬画面が白くなって、画面を切り替わること＞を言う。

こういったことをするためにAjaxという仕組みが必要となる。

・同期通信の場合
　webブラウザからサーバーにリクエストを通信し、レスポンスが戻ってくる。
　この時に、すべての情報を通信しているので、一瞬画面が白くなる。
　=> サーバーからレスポンスが返ってくるまでは他の作業はできない。

・非同期通信の場合
　webプラウザから一部の情報をリクエストするので、
　それ以外の部分は変わらない。なので画面が白くなることがない。
　=>サーバーからレスポンスが返ってこなくても他の作業ができる。
　　（一部の情報をサーバーに送信して、それを受け取り反映させる仕組み）

★参考URL：https://qiita.com/hisamura333/items/e3ea6ae549eb09b7efb9

-------------------------


◆SPA(SinglePageApplication)

SPAはAdobe FlashやMicrosoft SilverlightといったリッチなUIを提供できるRIA（Rich Internet Application）に代わるフロントエンド開発の技術として、ブラウザの進化やHTML5の登場などによって誕生したアーキテクチャ。
HTMLやJavaScript、CSSといったWeb技術で、デスクトップアプリケーションのような快適な操作性を実現できる。

名前に「Single Page」とあるように、1枚のHTMLに対してJavaScriptで動的に変更を加えながら画面の描画を実現しているのが大きな特徴です。もちろん、既存のWebアプリケーション同様、ブラウザから利用できる。
従来のWebアプリケーションと異なり、ページ全体をロードするのは初回のみで、2回目以降はサーバからJSONデータを受け取ることで必要箇所のみリロードする。

SPAとは

・単一ページで構成されるWebアプリケーション
・JavaScriptでDOMを操作しページを切り替える
・AjaxやWebSocketを使用する

SPAで使われている技術

・JavaScriptフレームワーク、ライブラリ（Angular、Vue.js、Reactなど）
・CSS Preprocessor（sass、stylusなど）
・通信技術（Ajax,WebSocketなど）
・バックエンド技術（Ruby on Railsなど）
・HTML5/CSS3


SPAのメリット
・豊かな表現力
・クロスブラウザ
・応答がはやい
・開発のスピードがはやい
プッシュ通知などもAPIとして提供されている

主なライブラリ、Framework
・React
　Facebook製のViewライブラリ
・Vue.js
　オープンソースなフレームワーク
・Angular
　Google製のフレームワーク

★参考URL：https://www.atmarkit.co.jp/ait/articles/1702/22/news012.html
	https://qiita.com/takanorip/items/82f0c70ebc81e9246c7a

-------------------------


◆スクリプト言語　（人間に優しい言語）

スクリプト言語とは、
習得するのを簡単にするために工夫されたプログラミング言語の総称のこと。

例えば、コンピュータの仕組みを意識しなくても「JavaScriptを習得すればWebページ上で計算処理ができる」のはスクリプト言語だからだとも言える。

・スクリプト言語のメリット
　スクリプト言語の最大のメリットはソースコードを書けばすぐに実行できる点。
　学習が比較的容易
　
「すぐに実行できる」とは、すなわち、
　ソースコードを書く→
　実行して確認 →
　ソースコードを修正する →
　実行して確認 →

　のサイクルで簡単にすばやく開発できるということ。
　比較的小規模な開発であれば、開発作業を効率的に進められる。


・スクリプト言語のデメリット
　利用用途が限定される場合がある
　実行速度が比較的遅い
　小規模な開発向きで大規模開発には向かない

　など。

「利用用途が限定される場合がある」とは、
例えば、
　JavaScriptはWEBブラウザ上でのみ実行可能
　実行速度が遅いため、処理速度を要求するシステムには使えない

といったようなこと。

スクリプト言語は、習得しやすく簡単であるものの、利用範囲は一定の制約がある。
そのため、開発する内容に応じてプログラミング言語を選択する必要がある。

代表的なスクリプト言語
JavaScript,Python、Lua、Ruby、PHP

コンパイル言語というものもある。
JAVA,C言語,C++など。

★参考URL：https://www.sejuku.net/blog/41665
-------------------------


◆オブジェクト指向

オブジェクト指向プログラミング
「モノ」を組み立てるように表現して、コンピュータに動作をさせる

（・手続き型プログラミング
　　上から下まで単調なルールで文章を読むように動作する
　・関数型プログラミング
　　数学の関数のイメージでデータに何かしらの処理をして答えを取得するように動作する）

オブジェクト指向言語
・さまざまなプラットフォームで動作するJava
・Webページに動きを与えるRubyやPHPやJavaScript
・Mac OSやiOSのアプリ開発で使われるSwift
・商用のプログラミング言語として定評のあるC++
・WordやExcelのマクロとして使用されているVBA

オブジェクト指向は、主にモノと、そのモノができること（役割）を決める。
プログラムの中では、「モノA」、「モノB」のように何種類もの「モノ」を用意する。
そして、「モノA」が、「モノB」に対して「モノBができること」をお願いする形で、コンピュータを動作させる。

例えば、オブジェクト指向プログラミングで「すごろく」を作る場合、

ゲームマスター
プレイヤー
すごろく（プレイヤーコマ、サイコロ、すごろく盤を含む）
というように、
何種類もの「モノ」を用意して、
それぞれの「モノ」や「モノができること（役割）」を表現していく。

オブジェクト指向プログラミングにはさまざまなメリットが有りますが「分かりやすくプログラムを表現できる」というのが最大のメリット。

参考URL：https://www.sejuku.net/blog/5973

-------------------------


◆コンパイラ言語　（機械に優しい言語）

コンパイルとは、実行する前にコンピュータが実行できる形式に翻訳することを言う。
人が書いたソースコードをコンピュータが理解できる機械語に翻訳してから実行するプログラミング言語の総称。
（コンパイル言語は、まず全てのコードを機械語に翻訳してから一気に実行する言語）

スクリプト言語と比較してコンパイル言語は、
　高速に動作する
　実行する前にコンピュータが実行できる形式に翻訳する必要がある
　特定の用途に限定しないという意味の汎用(はんよう)言語である場合が多い
　大規模開発に対応できる言語がある
　などの特徴がある。
JAVA,C言語,C++など。


★参考URL：https://qiita.com/tomokichi_ruby/items/73b0e7924a9f83fe45c6
	https://www.sejuku.net/blog/41665

-------------------------


◆JavaとJSの違い

【Java】
Javaは、Sun Microsystems社（2010年にOracle社が買収）が1996年に正式バージョンを発表したプログラミング言語。

Javaは世界的に見ても人気の高いプログラミング言語としての地位を確立しています。
Javaの最大特徴は＜環境に依存しない＞ということ。
JavaはJava仮想マシン（JVM）の上で動く。
（JVMについての参考URL：https://www.sejuku.net/blog/19871）
JVMはJavaのプログラムを動かすために必要なソフトウェア。
Javaが登場する前に書かれたプログラムは、
WindowsやOS Xなど動作する環境が決まっていて、それ以外では動作しなかった。
Javaでは「環境の違いをJVMに吸収してもらうこと」で、どんなコンピュータ上でも動くことができる。


【JavaScript】

JavaScriptは、Netscape Communications社が開発したWebプログラミング言語。
Webページの見栄えをよくしたいユーザーがWebページに取り入れたことで普及していった。
JavaScriptの特徴は、
「あまりプログラミングの知識もなく、開発環境がそろっていなくても手軽に始めることができる点」。
（今の自分にちょうどよい言語ということになる）
Internet ExplorerやGoogle ChromeといったWebブラウザと、テキストエディタ（メモ帳など）があれば開発することが可能。
（確かに過去、ネット環境がなくても、Google Chromeのブラウザで実行結果を確認することができたと思う。）

●目的が違う
Javaは「Write Once, Run Anywhare（一度プログラムを書けば、どんなハードウェアでも動作する）」ことを目指して開発された。
JavaScriptは、容易に開発できる手軽さと素早さを求めて開発されている。

●文法が違う
文法の違いとしては、Javaではデータ型というものを最初に固定で決める形式（静的型付）を取る。
一方、JavaScriptではデータ型を適宜変更できる形式（動的型付）を取る。
Javaは、コンパイル（コンピュータが処理できる形に翻訳）が必要ですが、JavaScriptはコンパイルが必要ありません。
（コンパイラ言語とスクリプト言語の違い）

●利用される分野が違う
Javaは業務システムやTwitterなどのWebサービス、スマートフォン用（Android）向けアプリなどを開発することができる。
JavaScriptは、Webブラウザ上で色を変えたり、ポップアップ表示をさせるといった動きがあるWebページを開発する際に主に使われる。

（JavaScriptは、開発当初はLiveScriptという名前だった。
　しかしJavaが発表された当時、世界中のユーザーから非常に注目されていたので、人気に便乗しようと名前を変更したのだとか）

★参考URL：https://www.sejuku.net/blog/31751

-------------------------


◆DOM（Document Object Model - ドキュメントオブジェクトモデル）

DOMとはJavaScriptでhtmlの要素を操作するための仕組みのこと。
(プログラムからHTMLやXMLを自由に操作するための仕組み)

例えばブラウザに表示される文字の色を変更したり、大きくしたりと、
Webページの見た目をプログラムで処理をしたい場合がある。
しかし何もしていない状態のHTMLファイルではJavaScriptから手を出す事が出来ない。
そこでファイルの特定の部分に目印を付けて
「この部分」に「こういう事をしたい」、
という処理を可能にするための取り決めがDOMである。

DOMは以下のような特徴をもっている。

・ツリー構造とも呼ばれる階層構造を取る
・それぞれノードという言葉で説明される
・WEBページとJavaScriptなどのプログラミング言語とを繋ぐ

●DOMは「階層構造」を取る

階層構造とは組織図のようなもの。
例えば<body>を頂点として、下にいくつかの<section>などの要素と、そのさらに下にいくつかの<p>などの要素で構成される。

例(これはHTMLで階層構造を構築した場合の一例だ。この階層構造を定義しているものがDOMと呼ばれる仕組みを使っていることになる。)

<body>
 <section>
  <p></p>
 </section>
  <section>
  <p></p>
 </section>
</body>

●各要素は「ノード」という単語を用いて表現される
DOMで必ず出てくる用語「ノード」。

・ノード
・子ノード
・親ノード
・兄弟姉妹ノード

ノードとは各要素(HTMLではエレメントやタグという)自体のことを表す。
特定のノードを基準としたときに、
その上にあるノードを「親:parent」ノードと表現し、
その下にあるノードを「子:childまたはchildren」ノードと表現する。
また同一階層にあるノードのことを「兄弟姉妹:siblings」ノードと表現する。

例えば「そのタグの子ノード全体を取得して、その親ノードから削除する」のような使い方をする。 

<body> 親ノード　parent
 <section> 基準ノード（とした時）
  <p></p>  子ノード　childまたはchildren
 </section>
  <section> 兄妹ノード　siblings
  <p></p>
 </section>
</body>

●DOMは「WEBページとプログラミング言語を繋ぐ役割を持つ」
DOMに沿った書き方で定義された「ノード」を通じてJavaScriptからHTMLを操作することができる。
document.getElementById('id名'); などで取得。
これが「DOM」が「WEBページを表示する言語であるところのHTML」と
「プログラミング言語であるところのJavaScript」を繋ぐ役目を持つということ。

★参考URL：https://eng-entrance.com/what-is-dom

-------------------------


◆Node.js

Node.jsはサーバサイドで動くJavaScript

JavaScriptはブラウザ上で動くために開発されたプログラミング言語だが、
サーバサイドでも動く。
PHPやJavaなどと同じような使い方ができるということだ。

サーバサイドJavaScriptと呼ばれるが、その中でも代表的なのがNode.js。
現状は、他にそこまで有名なものもないので、「Node.js = サーバサイドJavaScript」だと認識しておけばいいらしい。
MicrosoftやYahoo!などITの大手企業がNode.jsを推薦している。

●なぜサーバサイドでJavaScriptなのか

注目を浴びている理由は、
「クライアントもサーバサイドも同じ言語で書けたら楽だから」
これが最大の理由らしい。

サーバサイドがよくわからないWebデザイナーの人たちも、
JavaScriptは触らざるを得なくなっており、
「JavaScriptならやったことある！」という状態になっているからこそ、
ーバサイドプログラムもJavaScriptで書けると便利に感じるから。

●Node.jsでできること

Node.jsがサーバサイドで動くプログラムという説明自体が正確ではない。(PHPなどとはまったく違うものらしい)
より正確に言うと、Node.jsはサーバサイドでJavaScriptを実行できるようにしてくれるもので、
プラットフォームという表現が正しい。
PHPに対するWebサーバのApache的な存在のようにも思えるが、
Node.jsはサーバも構築できるし、アプリケーションプログラムも動かせる。

●Node.jsを使うときの注意点
Node.jsは小規模で機動性の高いWebアプリケーションを使うのが無難という意見あり。
特に、リアルタイム性が必要なアプリには最適という見方あり。

アクセス多数問題は実際には、データベース側での対応でどうにか出来る側面も強い。
大手企業での導入事例も多数あるが、まずは小規模アプリケーションで試すことをオススメする、
というまとめがあった。

★参考URL：https://eng-entrance.com/what-is-nodejs


-------------------------

◆JSのバージョンの違い ES5/ES6

ES5：ECMAScript 5th edition
ES6：ECMAScript 6th edition(ECMAScript 2015）

●テンプレートリテラル

テンプレートリテラル（`hoge`）を使用することで、特殊文字のエスケープや連結演算子の記述などが不要になる。
また、テンプレートリテラル内では、${variable}で変数をそのまま記述することができる。

＜ES5＞の場合

var name = "hoge";
var age = 13;
console.log("My name is \"" + name + "\" and I'm " + age + " years old.");
// My name is "hoge" and I'm 13 years old.

--

＜ES6＞の場合

var name = "hoge";
var age = 13;
console.log(`My name is "${name}" and I'm ${age} years old.`);
// My name is "hoge" and I'm 13 years old.

---

●アロー関数
ES5における関数宣言の方法は3種類存在する。

・通常のfunction命令

　function str(arg1, arg2) {
   console.log('hoge');
　}

・Functionコンストラクター（あまり使用しない）

　var str = new Function("arg1", "arg2", "console.log('hoge')");

・関数リテラル（匿名関数を利用）

　var str = function(arg1, arg2) {
   console.log('hoge');
　}

-

●アロー関数の宣言

ES6では、＜アロー関数＞を利用することで関数リテラルをシンプルに記述できる。
なお、関数リテラルとは、後述のthisの挙動が異なる。
　　　　　　　　↓↓↓↓↓↓↓↓↓↓↓↓↓↓
　var str = (arg1, arg2) => {
　  console.log('hoge');
　}

アロー関数は、引数が1つの場合に限って、

var str = arg1 => console.log(arg1);

のように引数の()を省略して書くことができる（引数が0個の場合は省略できない）。

また、上記の例のように1行に収まる場合、{}も省略してよい。


アロー関数がオブジェクトリテラルを返す場合は、

var str = func => ({ id: '8' });

のように、全体を()で囲う必要がある。

●thisの挙動の違い

(1) メソッド呼び出し
　var obj = {
　  value: 10,
　  show: function() {
　    console.log(this.value); // 10
　  }
　}
　obj.show();

オブジェクトに関連づけられた関数であるメソッドにおいては、thisは呼び出し元となるオブジェクトを意味する。
すなわち、上記の場合のthisはobjであり、this.valueはobj.valueを指す。

--

(2) 関数呼び出し
　function func() {
   var value = 2;
   console.log(this.value) // undefined
　}
　func();
上記のように通常の関数を呼び出した場合には、（オブジェクト内で宣言した関数だとしても）thisはグローバルを指す。
このため、関数内のthis.valueは関数内のvalue値を参照せず、グローバルのvalue値(未定義)を見る。関数外にvar value = 1;と書けば、結果は1となる。
--

(3) コンストラクタ呼び出し
　function Obj(value) {
   this.value = value;
　}
　var obj = new Obj(0);
　console.log(obj.value); // 0

コンストラクタでインスタンス化している場合、thisは生成されたインスタンスを指す。
今回の場合は、thisは＜obj＞を指す。

--

(4) apply, call, bind

var obj = {
　  value: 1,
   show: function() {
     console.log(this.value);
   }
　};
　var newObj = {
   value: 5
　};
　obj.show(); // 1
　obj.show.call(newObj); // 5
　obj.show.apply(newObj); // 5

call、applyメソッドを用いることで、第1引数の値をthisに束縛することができる。
すなわち、newObj = { value: 5 }がthisであるため、this.valueの値は5に変化する。

第2引数以降は関数に渡される引数。callは順番通りに、applyは配列として渡す。また、bindメソッドを使った場合は以下のように書く（thisを束縛した関数を生成する）。

var newFunc = obj.show.bind(newObj);
newFunc();

(5) アロー関数 [ES6〜]
アロー関数では、関数が宣言されたときのスコープにthisが自動的に束縛される。

　var obj = {
   value: 10,

　  //メソッド呼び出し
   show: function() {
     console.log(this.value); // 10

　    // 関数呼び出し
　    function show_01() {
         console.log(this.value); // undefined
     }
     show_01();

　    // アロー関数
　    var show_02 = () => {
         console.log(this.value); // 10 thisはobjを参照
     }
     show_02();
   }
　}
　obj.show();


●変数の宣言

JavaScriptで変数を宣言するときはこれまで「var」の記述を行っていた。
ES2015では「let」「const」という宣言が追加されている。

「var」で宣言した変数は、関数の内にあるのか外にあるのかでスコープが変わる。
関数の外で宣言するとグローバルスコープとなり、関数の内で宣言するとローカルスコープとなる。

let …… 変数の再宣言ができない　（同じ変数名が使えない）
const …… 変数への再宣言と再代入ができない

varを使った変数宣言では、例えば以下のような場合でもエラーを引き起こさない。

　var x = 10;
　x = 15;
　console.log(x); // 15
　var x = 12;
　console.log(x); // 12

---

letを用いた場合、以下のように一度宣言された変数と同名の変数を再度宣言することができない（変数への再代入はできる）。

　let x = 10;
　x = 15;
　console.log(x); // 15
　let x = 12; // Identifier 'x' has already been declared

---

また、constは定数のような役割をしており、一度初期化した変数への再代入が認められない。

 const x = 10;
 console.log(x); // 10
 x = 15; // TypeError: Assignment to constant variable.

ただし、constで参照型(オブジェクトや配列)を宣言した場合、参照自体の差し替えはできないが、参照の中身の変更は可能である。

 var ary1 = () => {
     const aryFalse = [1, 2, 3];
     aryFalse = [4, 5, 6]; // Error
     console.log(aryFalse);
 }
 ary1(); // Error

 var ary2 = () => {
     const aryTrue = [1, 2, 3];
     aryTrue[1] = 10;
     console.log(aryTrue);
 }
 ary2(); // [1, 10, 3]

---

●モジュール

ES5以前では、機能ごとに各JSファイルに分割して管理・開発することが基本的には出来なかった。
しかし、ES6では、別のファイルをインポートすることができる。
（課題の記載は、htmlの中に一つ一つ書いてくれているスタイルだったと思う。）
参考URL参照。

require
↓
var slider = require(./slider.js);
とすることで、slider.jsをインポートできる（./sliderと記述してもよい）。
このように、requireを用いることで、ファイル自体を読み込むことができる、など。


●クラス
クラスの宣言
ES5ではprototypeを利用して実現していたクラス定義を、
ES6ではclass命令を導入することで書けるようになった。

＜ES5＞

　var Add = function(arg1, arg2) {
     this.arg1 = arg1;
     this.arg2 = arg2;
　};

　Add.prototype.calc = function() {
     return this.arg1 + ' + ' + this.arg2 + ' = ' + (this.arg1 + this.arg2);
　};

　var num = new Add(5, 8);
　console.log(num.calc()); // 5 + 8 = 13

＜ES6＞

　class Add {
　    constructor(arg1, arg2) {
         this.arg1 = arg1;
　        this.arg2 = arg2;
　    }
　    calc() {
　        return this.arg1 + ' + ' + this.arg2 + ' = ' + (this.arg1 + this.arg2);
　    }
　}

　var num = new Add(5, 8);
　console.log(num.calc()); // 5 + 8 = 13

●クラスの継承

クラスの継承やオーバーライドは、superを使って行えるようになった。

＜ES5＞（すでにAddを宣言している前提）

　var AddSquare = function(arg1, arg2) {
     Add.call(this, arg1, arg2);
　};

　Object.assign(AddSquare.prototype, Add.prototype);

　AddSquare.prototype = {
     calc : function() { // メソッドの省略不可
         Add.prototype.calc.call(this);
     },
     calcSquare : function() {
         this.pow = Math.pow(this.arg1 + this.arg2, 2)
         return '(' + this.arg1 + ' + ' + this.arg2 + ')^2 = ' + this.pow;
     }
　};

　var numSquare = new AddSquare(5, 8);
　console.log(numSquare.calc()); // 5 + 8 = 13
　console.log(numSquare.calcSquare()); // (5 + 8)^2 = 169

--

＜ES6＞（すでにAdd classを宣言している前提）

　class AddSquare extends Add {
     constructor(arg1, arg2) {
         super(arg1, arg2);
     }
     calc() { // メソッドごと省略可
        super.calc();
     }
     calcSquare() {
         this.pow = Math.pow(this.arg1 + this.arg2, 2)
         return '(' + this.arg1 + ' + ' + this.arg2 + ')^2 = ' + this.pow;
     }
　}

　var numSquare = new AddSquare(5, 8);
　console.log(numSquare.calc()); // 5 + 8 = 13
　console.log(numSquare.calcSquare()); // (5 + 8)^2 = 169

※※※過去にProgateにて少し学んだが、クラスについては引き続き慣れていく必要がありそう。。。

参考URL：https://codeaid.jp/js-es2015/
	https://qiita.com/rifutan/items/a55f132d4dae7e2f1941
-------------------------



◆GoogleChromeのデベロッパーツールでJSをデバッグは、何のタブで行うか？

デベロッパーツールの「Sources」タブを表示。
（もし「Sources」にファイルが存在しない場合は、右側の「…」→「Go to file…」を選択）

①ブレークポイントを張る
②プログラムの途中で変数の値を変更する

※デバッグとは、プログラムのバグを取り除く作業のこと

●デベロッパーツールでブレークポイントを張る
　ブレークポイントとは、実行中のプログラムを停止させるポイントのこと。
　（選択したポイントの実行手前でプログラムが停止される
　　→例えば hoge++; をブレークポイントにしたら、++ の処理の手前で停止となる。…ということになるはず）
　＜Google Chromeのデベロッパーツールで、実行中のプログラムを停止させるポイントが設定できる。＞
　→基本的に、デバッグはプログラムが動いた結果を見て動作を確認しなければならないが、プログラムが動いている最中に確認ができてしまう

　例えば、変数の内容を確認の時は処理途中の停止したい部分にブレークポイントを指定し、
　デベロッパーツールの「Watch」タブの「+」を押して、変数名入力してEnterキーを押す。
　または、プログラムの停止中に、変数にマウスカーソルを当てると変数の値が表示される。
　確認したい変数を全てWatchに登録することもできる模様。

●デバッグ作業を行う
　ブレークポイントでプログラムが止まっている状態で、変数の値を変更して確認する。

　ブレークポイントを張ってプログラムを止めたら、
　右のウインドウの「Scope」タブから「Local」→「this: Window」をクリック
　→選択したい変数を探す。
　→希望の変数の値をダブルクリックする。
　→希望の値を入力する
　→値を変更したことによって動作する処理の部分にブレークポイントを張ってから、
　　右上の矢印ボタンを押して再度プログラムを動かす。
　→右上の湾曲した矢印のアイコンをクリックすると、プログラムを1行だけ実行させることができる

　☆☆デベロッパーツールを使いプログラムの途中で変数の値を変更させることで、無駄な時間を省いてデバッグができるようになる。

最低限のデバッグは今回の記事で可能ですが、デベロッパーツールにはもっと便利な機能がある模様。
「ステップオーバー」「ステップイン」「ステップアウト」等も便利な機能らしい。

★参考URL：https://incloop.com/%E3%83%87%E3%83%99%E3%83%AD%E3%83%83%E3%83%91%E3%83%BC%E3%83%84%E3%83%BC%E3%83%AB%E3%81%A7javascript%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E8%A1%8C%E3%81%86/
	https://ics.media/entry/190517/

-------------------------

◆GoogleChromeのデベロッパーツールでJSのログの確認は、何のタブで行うか？

consoleタブを開いて、JSプログラムを実行。
console.log()も使って、
・文字列を入れてif文の分岐条件の通過状態を見る
・変数を入れて値の代入状態を見る
など、デバッグでやりたいことのほとんどがconsole.log()で対応可能らしい。

□ログポイント□
ログポイントは、コンソールパネルに出力するための仕組み。
→sourcesからjsのファイルを呼び出して、ブレークポイントを張る時と同様に行番号までカーソルを持っていく。
→右クリックで＜Addlogpoint＞を選択して変数などを入力する。

ブレークポイントだとコード実行が一時停止するが、
ログポイントであればログを出力するだけで、コード実行は停止しない。
※実際に自分のjsファイルで試しながら慣れる必要あり。。。

★参考URL：https://qiita.com/mtanabe/items/49a116354c2ad9603942
	https://ics.media/entry/190517/ （上級者向けの記載部分に、ログポイントという機能もある模様。)

-------------------------
