HTML5&CSS3知識確認レベル1

・マークアップ言語とは
　マークアップ言語とは、文章を構造化するための言語。
構造化とは、タグや記号を用いてタイトルや見出し、重要部分などをコンピューターに認識させること。

ただのデータの羅列に意味を持たせるということでもあると思う。

正しくマークアップ言語を使うことで検索エンジンで上位に表示されやすい(検索エンジンにも認識される)もよう。


・HTMLの役割
　HTMLとはHyper Text Markup Language（ハイパーテキストマークアップランゲージ）の略。
ホームページなどを作成する際に用いられる。
文書構造を定義するものであり、骨組みや構造となるマークアップ言語で、コンピュータに画像やテキスト、ロゴなどを認識させるための役割を担う。
認識させたいテキストなどの前後をタグで囲むことで、コンピュータがその通りに表示できる。


・CSSの役割
　CSSはCascading Style Sheets（カスケーディング・スタイル・シート）の略で、ホームページなどの見た目・スタイルを定義するための言語のこと。HTMLで画面に表示する文書構造などを定義し、CSSでは表示方法や装飾などを定義できる。
CSSはデザインであり、テキストに下線を引いたり、枠で囲ったり、文字の大きさを変えたりできる。
HTMLで作ったものを装飾して見やすくする役割を担う。


・インライン要素、ブロックレベル要素の違い
　HTMLで定義されている要素のうち、<body>～</body>の中で使用される要素の多くは、 ブロックレベル要素（Block-Level Elements）か、インライン要素（Inline Elements）に分類される。 この分類により、どの要素の内側にどの要素を配置できるかなどのルールが定められている。

ブロックレベル要素は、見出し・段落・表など、文書を構成する基本となる要素で、一つのブロック（かたまり）として認識される。
ブラウザでの表示も一つのかたまりとして扱われることが多く、一般的なブラウザでは前後に改行が入る

　→ <div><form><h1>-<h6><p><ul>など。　

　インライン要素は、主にブロックレベル要素の内容として用いられる要素で、文章の一部として扱われる。 例えば、<p>要素の中の<strong>要素のように、段落のなかの一部を強調するような使われ方をする要素。一般的なブラウザでは前後に改行が入らず、文章の一部として表示される。

　→ <a><img><input><span><strong><textarea>

ブロックレベル要素の中にはインライン要素も含めることができるが、インライン要素の中にブロックレベル要素は入れられない。

・idとclass
　id属性は同Webページ内でid属性の値が重複してはならないが、class属性の値はいくつでも重複が可能。
CSSを指定する場合は、id属性は「#」、class属性は「.」を属性値の前につけるが、CSSでのデザインでしようするのは基本的にclassとし、idは目印として使用したりJavaScriptをかけるときなどに使用することをおすすめする人がいる模様。


・リセットCSS、ノーマライズCSS、サニタイズCSSの違い

　HTMLのタグには「デフォルトCSS」と呼ばれるブラウザに組み込まれたCSSがはじめから適応されている。
例えば、見出しをh1タグでマークアップするとfont-sizeでサイズ指定した訳じゃないのに大きなフォントサイズで表示される。
またliタグにはlist-styleを指定した訳じゃないのに文頭に「・」が付いていたり、pタグにmarginを指定した訳じゃないのにmarginが付いていたりするようなことを指している。
CSSの影響を受けずにコーディングするためにリセットcss、ノーマライズcss、サニタイズcssをhead内の自分の書いたCSSの上に記述し読み込む必要がある。

リセットCSSとは、デフォルトCSSをほぼ全てリセットできるCSS。
例えば、h1〜h6のデフォルトCSSのフォントサイズがリセットされ全て同じになる。
また、ulやolの文頭（・や番号）に何も表示されなくなり、デフォルトCSSのマージンがリセットされて要素の間が詰まっている。
ただし、CSSの記述量が増えてしまうこともある。

ノーマライズCSSとは、デフォルトCSSを活かしつつブラウザ間で誤差があるところだけ調整してくれる。
Google Chrome、EDGE、Firefox、Safariなどいった様々なブラウザ表示の差異が調整される。

サニタイズCSSとは、ノーマライズCSSと同じようにブラウザ間（Google Chrome、EDGE、Firefox、Safariなど）の誤差を調整し、さらに「list-style:none」や「box-sizing: border-box」などのよく使うCSSの指定もしておいてくれる。



・デベロッパーツールとは/デベロッパーツールの使い方

　デベロッパーツール(開発者ツールと)は、Googleが提供しているブラウザ、Chromeに付属しているツールの一つです。Chromeだと「検証」のこと。
クローム以外のブラウザだと、Firebug（firefoxプラグイン）、Webインスペクタ（Safari）、開発者ツール（Internet Explorer）といったものがあり若干操作は違いますが、基本的に全て同じもの。

デベロッパーツールを使用すると、できるようになること

　・特定の場所のHTMLやCSSがどのように反映されているか即座に知ることができる
　・今まで一つ一つなんとなく書いていたCSSがリアルタイムに反映され視覚的にわかりやすく構築できる
　・ChromeやFirefoxでは問題ないのにInternetExplorerで起きていた不具合をすぐに見つけられる
　・他のサイトで「この部分どうやって書いているんだろうな」と思っていたところがわかるようになる（！）
　・Facebookのいいねボタンなどの動的に出力されている箇所のCSS制御ができるようになる

メリット
　・HTML、CSSの打ちミスやどこでエラーが起きているかを早く見つけられるようになる
　・CSSをリアルタイムで確認しながら入力するので作業時間が劇的に短くなる
　・ブロック要素、インライン要素といった要素がよくわからなかったものが理解できるようになる
　・どのCSSスタイルが優先されてかかっているかわかる
　・動的に生成されている要素に対してCSSを確認したりCSSをかけることができるようになる
　・jQueryのデバッグができるようになる＆早く作業できるようになる
　・ファイルの読込にどのくらい時間がかかっているのか、またエラーとなっているファイルを簡単に見つけられる
　・html, cssに対して恐怖心が薄らいでいく
　・多少の崩れでは動じなくなる！

デメリット
　・最初に画面の見方など少しだけ新しいことを覚えないといけない
　・html, cssの基本がわかっていないとちょっと厳しいので多少は知識が必要
　・デベロッパーツールを全画面表示でみていると周りから驚かれる


デベロッパーツールの使い方

　検証したいページを開き、クローム右上のアイコン→ツール→デベロッパーツール」からデベロッパーツールを表示します。
ショートカットはウィンドウズであれば「F12」もしくは「Ctrl+Shift+I」
Macは「Command+Option+I」で表示可能。

画面の見方
出てくる画面の「Elements」という部分がhtmlのソースを表示する選択肢。（選択されている部分の背景がグレーになる）
その下のコードが記載されている部分で青く選択されている箇所が現在閲覧している箇所となる。
選択されている箇所のCSSについても、その画面の右、あるいは下の方に表示される（Styleというような記載あり）

操作の仕方
デベロッパーツールの左上の虫眼鏡アイコン（Macでは四角に矢印のアイコン）をクリックする。
確認、調べたい部分にカーソルを合わせるとその箇所の色の表示などが変わり、選択されていることがわかる。
その状態でクリックすると、その箇所に対応しているHTMLをElements内で表示してくれる。
（虫眼鏡アイコンを使っているときはクリックしてもリンク先に画面遷移しない）
虫眼鏡アイコンをを使うと確認したい箇所のコードを探しやすい。
直接コードから辿る場合は、elementsのhtmlタグの左にある▼ボタンを押すとhtml要素が展開されます。
（もしくはカーソルキー上or下で移動をし、左or右で開閉します）

HTMLの中身を変更してみる
選択したHTMLを表示させ、テキスト部分をダブルクリックすると、テキストを変更（いじる）ができる。
任意の文字を入力しエンターで確定し変更すると、画面上の表示も変わっていることが確認できる。

どの画像が使われているのか、その画像のリンク先は、元画像のサイズはいくつなのか、といった情報も虫眼鏡アイコンをクリックして確認したい画像をクリックする。
デベロッパーツール上のhtml側のimgが表示されるので、imgタグの上にカーソルを合わせるとどの画像へのリンク、元画像のサイズ（今回は元画像と表示されているサイズが一緒）などのインフォメーションがわかる。
imgのsrc属性の値も変更できるので、他の画像をいれてみることもできる。

CSSについても、htmlのコードが表示されるデベロッパーツールの右側に表示され、値を変更したりプロパティを追加したりすることも可能。
CSSには優先度というものがあり、有効になっているものはそのまま表示され、無効になってしまっているものには「取り消し線」が引かれている。

自身で値を変更したりした際にすぐに画面上に反映されるものなので、気軽に試して視覚的に確認することができる。
